/*
Древние берляндцы считали, что чем длиннее имя, тем важнее человек, его носящий.
Берляндские цари славились своими длинными именами. Но длинные имена — это несколько
неудобно, поэтому берляндцы стали сокращать имена своих царей. Каждого царя они называли по
первым буквам всех его имен. Например, царя, которого звали Великий Василий Пупкин,
берляндцы всегда зовут ВВП.
В Берляндии за её долгую историю сменилось немало династий царей, но все они были
объединены общими традициями. Так, согласно одной из берляндских традиций, для поддержания
стабильности в государстве, первое имя наследника должно совпадать с последним именем
предшественника (следовательно, первая буква сокращенного имени наследника совпадает с
последней буквой сокращенного имени предшественника). Берляндцы очень ценят стабильность,
поэтому эта традиция никогда не нарушалась. Еще берляндцы любят завершенность, поэтому еще
одна традиция требует того, чтобы первое имя первого царя в династии совпадало с последним
именем последнего царя в этой династии (следовательно, первая буква сокращенного имени
первого царя совпадает с последней буквой сокращенного имени последнего царя). Эта традиция,
естественно, тоже всегда соблюдалась.
Название династии образуется по очень простым правилам: берутся все сокращенные имена
царей в том порядке, в котором они правили, и выписываются в одну строчку. К примеру, династия
из царей «аb» и «ba» называется «abba», а династия, в которой был только царь «abca», называется
«abca».
Историк Вася недавно нашел список сокращенных имен всех берляндских царей и их
родственников. Помогите Васе найти максимально длинное название династии, которая могла
существовать в Берляндии.
Заметим, что в списке все имена упорядочены по времени, то есть если имя A идет в списке
раньше, чем имя B, то если A и B были царями, то царь A правил раньше, чем царь B.
Если список Васи оказался неправильным и ни одной династии в нем найти нельзя, выведите
единственное число 0.

3 abc ca cba

6

4 vvp vvp dam vvp

0

3 ab c def

1
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace B_14
{
    class Program
    {
        static string[] str = new string [1000];
        static int n;
        static int [] lengths = new int [1000];
        static int LengthCheck (int init, int t)
        {
            if (init == n - 1)
            {
                return t;
            }
            else
            {
                if (str[init][str[init].Length - 1] == str[init + 1][0])
                {
                    t = lengths[init] + LengthCheck(init + 1, t);
                }
                else
                {
                    t = LengthCheck(init + 1, t);
                }
                return t;
            }

        }
        static void Main(string[] args)
        {
            using (StreamReader sr = new StreamReader("input.txt"))
            {
                string [] input = sr.ReadLine().Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                n = int.Parse(input[0]);
                for (int i = 0; i < n; i++)
                {
                    str[i] = input[i + 1];
                }
            }
            for (int i = 0; i < n; i++)
            {
                lengths[i] = str[i].Length;
            }
            int max = 0;
            for (int i = 0; i < n; i++)
            {
                int length = LengthCheck(i, lengths[i]);
                if (length == str[i].Length)
                {
                    if (str[i][str[i].Length - 1] != str[i][0])
                    {
                        length = 0;
                    }
                }
                if (lengths[i] == 1)
                {
                    length = 1;
                }
                if (length > max)
                {
                    max = length;
                }
            }
            Console.WriteLine(max);
            Console.ReadKey();
        }
    }
}
